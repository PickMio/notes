1,高等数学:为了及格,同时帮助概率及格  
2,概率:为了证明高等数学可以帮助及格
3,线性代数:如果你学习计算机图形学,就是opengl/direct3d的话,里面的3d模型的空间坐标用矩阵来表示的，如果你需要把它们进行投影，叠加，移动，就需要矩阵乘法／变换／转置等等，所以还是很有用的
4，离散数学：主要是给你打下计算机数据模型的理论基础。里面包含集合，数，图，等等，更重要的是如果你以后要搞研究，研究0错误程序，就是完全没有bug的程序，就需要用它上面的推导理论来对程序经行证明。如果你要通过系统分析员，这个也是要考试的
5， 数字电路／计算机组成／计算机技术：如果你是一个很深入的程序员，你会问：为什么浏览器可以显示那么多东西－>有html语言->html语 言是怎么开发的->高级语言->高级语言怎么完成的->汇编->汇编怎么来的－>固化／机器语言->机器语言如何能 操纵计算机->在节拍电路的干预下，内部芯片的结构把0/1字符串译码，操作累加器，总线，内存做不同的操作那好，这个过程差一个东西都不可以，如 果你只学习里面的高级语言部分，那岂不是神龙见首不见尾，感觉很不爽？？？所以你要能自己做一个计算机出来才好！！！
数字电路是学习门电路组成的，就是如何把流动的电信号保持下来，同时让他们有规律地变化
计算机组成是让你用门电路来设计内存／cup／时钟等等
计算机技术是让你综合学到的东西，做一个简单的计算机出来。
有 了哪些知识，当然还要包括编译原理，软件工程，操作系统，数据库，网络，你学习其他的语言，什么vc/vb/deliphi等等，每种语言不超过3个月你 就是高手。你要学windows程序，要用api，只需要15天就可以作出像模像样的东西。当然，我这里是指语言本身而言。有了这些基础和语言掌握的熟 练，你想学数据库编程，好，复习一下数据库的课程，查阅一下sql的语法，1天就有眉目了。你要学网络编程，选择一种库，看看文档，明白函数的用法，也就 是一两天的问题。等你做出点东西，有了信心，你也就有了经验。这个时候去明白j2ee/.net 等等的frame work，就很容易了。参看以下design pattern,你也就胸有成竹，做个小组长也可以。再过几年，有了机会，说不定就当了manager，等了到了三十多岁，你不想干软件了，你有计算机组 成的基础，找几个高手带你一下，你可以去做单片机的汇编语言编程，可以去做embeded system  
所以，学好了基础，也就是厚积薄发，后面你想怎么发展都可以！
学了数字电路才知道，原来很神秘的电脑是由一些触发器，逻辑门组成的，把它们集成再集成，就成了电脑　了，译码器，全加器，计数器......  
CMOS不过就是一种存储器，BIOS不过就是面向硬件的一种已编好的子程序，（和C的库函数差不多，我认为）学好了汇编，我可以自己编（还让我花了30人民币，买　了一本CMOS设置书，认为它很高深莫测）
　　不学好C，怎么学好WINDOWS程序设计，怎么能做一个优秀的程序设计人员
　　不学好前人花几十年时间总结出来的数据结构，你的进步能有多快，那是让你踩在巨人的肩膀上。（你要是天才，我就没话说了，不过要是学了，你会更天才）
　　这是我自己经历的一点学习基础课的过程，它给我解疑释惑，当然这些问题在行家眼里可能不值一哂，但它是每一个新手必经的过程。
　　更为关键的是，基础课给了我们最核心的知识，让我们能在离开学校后有继续学习的能力。它给了我们一个知识结构，让我们能在他的基础上扩充，把新的东西加入自己的知识框架中，这是基础课重要的意义所在。很多人提到基础学好　之后，学习新东西很快，就是这个道理。
　　不可否认的是，基础课很枯燥，很费劲。但这要看你怎么去看它，你想一想，学好了他，就能抓到计算机的本质，能让他对你俯首帖耳，这难道还不够激动人心吗？老在别人的基础之上作设计，却不懂所以然，不闷吗？
　　既然讨论的题目是给在校大学生一点建议，那我也说一点儿。
　　先说技术层面的，在学好专业课的基础上看一些学校里不讲的新知识，新技术，能促进你的融会贯通，但不可本未倒置　。
　　再说最关键的，最想说的，请在校的学生们珍惜你的时光，不要都　去打了游戏，谈了恋爱，时光宝贵，机会难得。
　　我经常对自己说，如果再让我上一次学，我会......  
　　可是不会了，我只好对自己说，如果我现在再不学，就会......  
于 是我努力去学，边工作，边学习，舍不得丢掉一节课，在校的学生们可能无法体会听老师讲课的幸福，自学时怎么也搞不清的东西，老师一句话就茅塞顿开，老师那 清晰的思路也让你受益匪浅（在这里应该感谢那些老师们，虽然他们有些时候的简略很让人恼火）。但越学，心里越没底，有太多的东西我都没学好，更有很多东西 根本就不知道，正所谓皓首穷经。
　　我不时的咒骂自己的懒惰，也许是过于愚笨，努力不够，学习计算机也有三年多了，直到现在，我才觉得自己开始了解计算机，才明确了方向。
　　我从文科转入这一专业，而且也不小了，就凭着我对计算机有着强烈的兴趣。他是人类智慧的体现，程序设计更是一种艺术，他能让我们的才华得到充分发挥，我会继续努力下去的，虽然有些迟了，但为了不更迟。
　　希望在校的学生们能多珍惜一些时间，不要比我还迟。
下 来如果觉得自己接受能力强的话就可以开始学C了（注意不是C++），如果感觉有困难也可以先学Pascal过度一下。还有很重要的一点就是千万不要一开始 就学VB，DELPHI，VC之类的东西，这些东西在一开始学会对你造成很坏的影响。有可能会把你引入另外一个错误的学习方向而忽略了真正应该掌握的东 西。学C主要是学过程话的程序设计，学会把自己的程序分成许多的函数（或过程），养成良好的编程习惯。这时可以多看一下高人的程序，不一定要懂意思，主要 是学会别人程序的格式（比如变量如何起名，怎么划分函数）。除开掌握基本的控制流语句外，应该学习一些很简单的I/O函数和数学函数。C的学习主要是你舍 弃原来BASIC程序那种把所有语句积成一大堆的风格，要学会使用函数，提高代码重用性。对于指针之类的东西如果实在看不懂可以先不去管，到后面会有办 法。当你能够比较自如的用C编写一些小的计算程序时，你就可以开始你的数据结构的学习了（数学的学习主要是在学校，自己要多用心）。数据结构你可以一点一 点漫漫看，并不需要专门空出一段时间来专门研究，这样的目的是让你能够很好的掌握它，要学会用数据结构的知识来规范自己的程序设计和提高程序的效率。学完 C我认为接着最好学习汇编。这个或许有许多人都会反对，然而我个人认为这样是很好的。从最基本的DOS汇编开始，买本《IBM PC汇编程序设计》（清华黄皮）一定要一点一点吃透，实在看不懂就跳，反复的严读是一定可以看懂的。汇编是一定要掌握的，因为它涉及到很多最基本的知识。 掌握了汇编和对I/O有了个很彻底的认识后，应该去学编译原理。这个东西并不要精通，但是一定要知道，在大脑里要有一个这样的概念，这对你对程序语言的控 制能力都有很大的帮助。这样最基本的学习就算完成了。一般智力正常的人前一段东西应该都是可以掌握的。接着后面的学习就要看你自身的造化了。这个时候你应 该研究一下数据结构，不要分散自己学习的注意力，要知道数据结构是异常重要的（相信我，绝对没错）如果你觉得自己已经对于树，连表，堆栈之类的东西和排 序，递归之类的算法已经十分清楚，就可以开始学习C++了。学习前一定要有个正确的认识，那就是C和C++是两个不同的东西。学习C++是为了学习面向对 象的程序设计，这个时候你对于指针应该也能够掌握了（有汇编的基础），主要抓住C++和C相比的一些新特性，对于多态之类的特性要注意理解掌握，如果没有 搞懂就坚决不要往下学习。一些基本的概念掌握以后可以看一些别人设计的程序，学习别人怎么利用面向对象的方法来设计程序的。这个东西也是人之间拉开档次的 一个环节，可以和数据结构放在同等重要的地位。我就见过有的人都大学毕业了还搞不懂virtual到底是怎么一回事情。其实我认为学到这里你已经为你成为 一个优秀的程序员打下了很好的基础，你已经能够应用C++，懂得面向对象程序设计，对数据结构掌握很好，掌握汇编和编译原理。接下来的学习就是基于操作平 台的了，一般是先学windows（Microsoft毕竟是老大），先学win32 api，搞请windows基本消息机制和原理，有汇编基础基本上不会碰到什么困难。其实只要会了API，其余什么MFC，VCL都是囊中之物了，都不过 是对于API的封装而已。VC，C++Builder都可轻松拿下，这只是开发工具的问题。以后的OLE(ActiveX)，.NET，数据库就要看自己 的发展方向而定了。我在这里强调的是前面的基本能力的学习，后面操作平台虽然知识体系庞大，然而毕竟比较死，更好掌握。最后编程能力的高低主要还是有以下 几点决定：1。编程的习惯 2。数学能力（包括逻辑思维，分析问题的能力） 3。对数据结构的认识能力 4。经验的多少（包括多使用语言的掌握能力）
学习编程的道路是充满艰辛，漫长而曲折的，作者罗列了一堆自己知道的编程方面的知识，并且给出了一个具体的顺序，所谓先学什么，后学什么；没学会什么，就一定不要去学另一个什么.....其中很多内容有一些道理。但是总是难逃片面。
从 入门到精通一类的东西看的太多了，难道真的凭借一本书就能从一个电脑盲编程精通的专家了么。我郑重的建议那些想“速成”高手的人，放弃你的想法吧。一个计 算机专业的本科生，要花上4年时间才能毕业，需要学习的专业知识岂是一朝一夕就能掌握的。就算去除一些公共课所占用的时间，我觉得要入计算机行业这个“门 ”，至少需要两年的时间。两年后才能说，对计算机有一些了解了，知道了计算机的基本组成原理，对时钟晶振，中断芯片有一定了解，用汇编简单控制8259编 程。也知道了一些计算机程序设计语言方面的原理，掌握了一俩门传统的样板编程语言，了解了i++和++i对于VC的编译器来说意味着什么，有了一些数据结 构方面的认识，能把现实生活中的一些问题用程序模拟出来。
但这一切也不 过是刚刚入门而已，只是打基础。至于以后再学习Windows系统原理，消息机制，掌握这个类库，那个类库；抑或是研究Linux内核，进而了解嵌入式系 统开发工具和方法，那要看个人喜好了。我只是举几个例子，但是随便那个，要敢说自己已经完全掌握，至少还要几年吧。
如 果上面的东西中有的已经很精通了，可以称为专家了，那么恭喜你，你可以考虑把这些东西再总结，提升一个层次，从系统架构角度回顾一下要实现某个需求，通常 需要使用什么技术，多少人，多长时间来开发，成本多少，收益多少，风险又有多少，还可以总结出一些控制软件开发进度的方法，生成软件的方法，人们把这些方 法归纳起来叫做软件工程。而你，也应该是一个项目经理了吧。
如果这些东西都学会了，再次恭喜你，你可以考虑能不能把现有的客户拉到自己身边来，找个人给自己投资，成立自己的软件公司。成为浩浩荡荡的软件创业者中微不足道的一员。
我本科经管，去年跨专业考计算机研。
我自学了，VB，VC，数据结构，离散，操作系统，数据库原理等。
开 学以来做完了数字图像处理的所有的实验--有个别实验还是很难的。我从paperVC++被逼--也算是熟练（离精通差远了）而系里其他的同学却没有一个 自己全部编出来的，都是抄书的。但并不能说明他们的计算机水平都差，比起编程水平，我更佩服那些真正计算机专家--尽管他们不编程。但是他们的研究成果往 往大大帮助我们编程，很多编程思想都是他们过去的研究成果！！我们就算编出来了--也就是说明我们有点小聪明，但决不可以和系统完备的大智慧相比！就像我 们可以利用数学定理计算一些复杂的数学题目一样，这没什么了不起--真正了不起了还是那些定理提出者，和证明者。这一个学期前我一直想好好地把编程好好学 学，可是越来越觉得数学功底不足（当然不仅仅只高数）。现在真佩服那些数学家！真正的计算机专家！过去学数据结构时，八皇后，背包，搜索--一直令人头 疼，好像懂，但不爽，记不住。在一个专家（图灵奖获得者）的看似简单思想的指引下--这些算法统一到了一起-------一切似乎都那么明了！显然如果你 编程的话也提高编成的水平。还有记得学数据库原理，开始那段自己在没有规则指引的条件下想理清楚各种事物的关系时，是那么的混乱。而有了 armstrong公理系统的三条规则---世界就一下子变得清晰！--这个最好的程序员能做到吗，他也只能每次遇到具体问题，每次发挥它聪明去理关系， 也难保不出错，还要累死大量脑细胞！
既然读研究生，重点在思想。但我有自知之明，我们那么好的功底，也许以后就是编编程序，难弄出这种精华的东西，但是注重思想的学习-会对学具体知识起到巨大指导作用。所以我不会觉得编程水平低的就不行--很可能比程序高手的价值高很多倍！
但迫于个人造诣和以后就业的压力，还是把流行技术性的东西掌握一下好。
你 的学习轨迹不代表别人需要向你学习，还是看看老外那些大师的言谈吧，老外认为学习编程的过程有两种，一是打好所有的基础之后再去实战；二是有点基础就先实 战，一边实战一边补充理论。实际上大多数老外倾向于后者。按照你的办法光是学这些基础就要耗掉太多的时间，却没有一点自己编出点程序后的喜悦感，恐怕还没 实战就已经先厌倦了。就像你看到的所有大师级的编程书籍，他们总是在适当的时候来个简单的sample让你感受一下，而不是先把所有的理论都讲完后再在最 后一章给你一个复杂的sample.总之一句话，学以致用。学的目的是为了用，只有用了才知道该学什么。软件知识有如汪洋大海，浩瀚无边，没有人敢说自己 在各方面都精通的，需要根据实际需要以及自己既定的目标去发展。
说到数学对软件开发的重要性，严格讲是对于自然科学的重要性，地球人都知道。哪一个自然科学的重大成果不是数学家或具有深厚数学功底的自然科学家创造的。远的不说，
近 代通信理论奠基人是美国数学家香农；近代控制理论奠基人维纳也是数学家。自然科学玩到尖端就是在玩数学，数学是推动自然科学进步的主要动力。但正如人们所 说的：“除非你是天才，否则你不要去研究数学”。偌大的中国，有几个具有国际声望的数学家？说白了，我们大多数人都不是天才，我们学习软件，应用与兴趣至 上，别把自己搞得跟个苦行僧似的拼着命去苦练成高手，我相信大多数学编程的人一是为了生存，二是为了兴趣。去体会编程的乐趣吧，当然要想获得这种乐趣，你 得勤奋点。
终于点到题目上来了。大多数的人都希望自己的东西能够马上跑 起来，变成钱。这种想法对一个已经进入职业领域的程序员或者项目经理来说是合理的，而且IT技术进步是如此的快，不跟进就是失业。但是对于初学者来说（尤 其是时间充裕的大中专在校生），这种想法是另人费解的。一个并未进入到行业竞争中来的初学者最大的资本便是他有足够的时间沉下心来学习基础性的东西，学习 why 而不是how。时髦的技术往往容易掌握，而且越来越容易掌握，这是商业利益的驱使，为了最大化的降低软件开发的成本。但在IT领域内的现实就是这样，越容 易掌握的东西，学习的人越多，而且淘汰得越快。每一次新的技术出来，都有许多初学者跟进，这些初学者由于缺乏必要的基础而使得自己在跟进的过程中花费大量 的时间，而等他学会了，这种技术也快淘汰了。基础的课程，比方数据结构，操作系统原理等等虽然不能让你立马就实现一个linux（这是许多人嘲笑理论课程 无用的原因），但它们能够显著的减少你在学习新技术时学习曲线的坡度。而且对于许多关键的技术（比方Win32 SDK 程序的设计，DDK的编程）来说甚至是不可或缺的。
一个活生生的例子是 我和我的一个同学，在大一时我还找不到开机按纽，他已经会写些简单的汇编程序了。我把大二的所有时间花在了汇编，计算机体系结构，数据结构，操作系统原理 等等这些课程的学习上，而他则开始学习HTML和VB，并追赶ASP的潮流。大三的时候我开始学习Windows 操作系统原理，学习SDK编程，时间是漫长的，这时我才能够用VC开发出象模象样的应用程序。我曾一度因为同学的程序已经能够运行而自己还在学习如何创建 对话框而懊恼不已，但临到毕业才发现自己的选择是何等的正确。和我谈判的公司开出的薪水是他的两倍还多。下面有一个不很恰当的比方：假设学习VB编程需要 4个月，学习基础课程和VC的程序设计需要1年。那么如果你先学VB，再来学习后者，时间不会减少，还是1年，而反过来，如果先学习后者，再来学VB，也 许你只需要1个星期就能学得非常熟练。
几个重要的基础课程
如果你是学生，或者如果你有充足的时间。我建议你仔细的掌握下面的知识。我的建议是针对那些希望在IT技术上有所成就的初学者。同时我还列出了一些书目，这些书应该都还可以在书店买到。说实在的，我在读其他人的文章时最大的心愿就是希望作者列出一个书单。
大 学英语－不要觉得好笑。我极力推荐这门课程是因为没有专业文档的阅读能力是不可想象的。中文的翻译往往在猴年马月才会出来，而现在的许多出版社干脆就直接 把E文印刷上去。学习的方法是强迫自己看原版的教材，开始会看不懂，用多了自然熟练。吃得苦下得狠心绝对是任何行业都需要的品质。
计 算机体系结构和汇编语言－关于体系结构的书遍地都是，而且也大同小异，倒是汇编有一本非常好的书。《80x86汇编语言程序设计教程》（清华大学出版社， 黑色封面，杨季文著）。你需要着重学习386后保护模式的程序设计。否则你在学习现代操作系统底层的一些东西的时候会觉得是在看天书。
计 算机操作系统原理－我们的开发总是在特定的操作系统上进行，如果不是，只有一种可能：你在自己实现一个操作系统。无论如何，操作系统原理是必读的。这就象 我们为一个芯片制作外围设备时，芯片基本的工作时序是必需了解的。这一类书也很多，我没有发现哪一本书非常出众。只是觉得在看完了这些书后如果有空就应该 看看《Inside Windows 2000》(微软出版社，我看的是E文版的，中文的书名想必是Windows 2000 技术内幕之类吧)。关于学习它的必要性，ZDNET上的另一篇文章已经有过论述。
数 据结构和算法－这门课程能够决定一个人程序设计水平的高低，是一门核心课程。我首选的是清华版的（朱战立，刘天时）。很多人喜欢买C++版的，但我觉得没 有必要。C++的语法让算法实现过程变得复杂多了，而且许多老师喜欢用模块这一东西让算法变得更复杂。倒是在学完了C版的书以后再来浏览一下C++的版的 书是最好的。
软件工程－这门课程是越到后来就越发现它的重要，虽然刚开 始看时就象看马哲一样不知所云。我的建议是看《实用软件工程》（黄色，清华）。不要花太多的时间去记条条框框，看不懂就跳过去。在每次自己完成了一个软件 设计任务（不管是练习还是工作）以后再来回顾回顾，每次都会有收获。
Windows 程序设计－《北京大学出版社，Petzold著》我建议任何企图设计Windows 程序的人在学习VC以前仔细的学完它。而且前面的那本《Inside Windows 2000》也最好放到这本书的后面读。在这本书中，没有C++，没有GUI，没有控件。有的就是如何用原始的C语言来完成Windows 程序设计。在学完了它以后，你才会发现VC其实是很容易学的。千万不要在没有看完这本书以前提前学习VC，你最好碰都不要碰。我知道的许多名校甚至都已经 用它作为教材进行授课。可见其重要。
上面的几门课程我认为是必学的重要课程（如果你想做Windows 程序员）。
对 于其它的课程有这样简单的选择方法：如果你是计算机系的，请学好你所有的专业基础课。如果不是，请参照计算机系的课程表。如果你发现自己看一本书时无法看 下去了，请翻到书的最后，看看它的参考文献，找到它们并学习它们，再回头看这本书。如果一本书的书名中带有“原理”两个字，你一定不要去记忆它其中的细 节，你应该以一天至少50页的速度掌握其要领。尽可能多的在计算机上实践一种理论或者算法。
你还可以在CSDN上阅读到许多书评。这些书评能够帮助你决定读什么样的书。
日三省乎己
每 天读的书太多，容易让人迷失方向。一定要在每天晚上想想自己学了些什么，还有些什么相关的东西需要掌握，自己对什么最感兴趣，在一本书上花的时间太长还是 不够等等。同时也应该多想想未来最有可能出现的应用，这样能够让你不是追赶技术潮流而是引领技术潮流。同时，努力使用现在已经掌握的技术和理论去制作具有 一定新意的东西。坚持这样做能够让你真正成为一个软件“研发者”而不仅仅是一个CODER。
把最多的时间花在学习上
这 是对初学者最后的忠告。把每个星期玩SC或者CS的时间压缩到最少，不玩它们是最好的。同时，如果你的ASP技术已经能够来钱，甚至有公司请你兼职的话， 这就证明你的天份能够保证你在努力的学习之后取得更好的收益，你应该去做更复杂的东西。眼光放长远一些，这无论是对谁都是适用的。
相信你已经能够决定是否学习C＃或者什么时候去学它了